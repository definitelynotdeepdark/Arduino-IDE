#include <WiFi.h>
#include <time.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include "ThingSpeak.h"

#include <WiFiClient.h>

//buzzer
#define BUZZER_PIN 27


const char* ssid = "name";
const char* password = "password";

// Telegram Bot Token
const char* botToken = "------------------------------------";
const char* chat_id ="-----------------------------------";
//HC501 sensor
int HC501_digitalPin = 33;
int HC501_val = 0;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡πÅ‡∏•‡∏∞ Bot Instance
WiFiClientSecure client;
UniversalTelegramBot bot(botToken, client);

//Bool
bool Start_Notify = true; //‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤
bool Warning_Notify = true;//‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å
bool Duty = false; //‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
bool Auto = true; //‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
bool hasBeeped = false; //‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
bool doit = false; //‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö

//Thingspeak
int count_intrusions = 0;
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î API Key ‡πÅ‡∏•‡∏∞ URL ‡∏Ç‡∏≠‡∏á ThingSpeak
const char* server = "------------------------------------";
String apiKey = "------------------------------------"; // ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

//Time
char ntp_server1[20] = "pool.ntp.org";
char ntp_server2[20] = "time.nist.gov";
char ntp_server3[20] = "time.uni.net.th";
int timezone = 7;
int dst = 0;
int currentHour;
int currentMin;
int currentSec;

//TimeSet
int time_start_hour = 1;
int time_start_minute = 30;
int time_end_hour = 6;
int time_end_minute = 30;

//ultrasonic
const int pingPin = 5; //trig
int inPin = 18; //echo
long duration, cm; 

void setup() {
  pinMode(HC501_digitalPin, INPUT); // sets the pin as input
  pinMode(BUZZER_PIN, OUTPUT); 
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(BUZZER_PIN, HIGH); 
    Serial.begin(115200);
    Serial.printf("Connecting to %s ", ssid);
    
    WiFi.begin(ssid, password);
    int retry_count = 0;
    while (WiFi.status() != WL_CONNECTED && retry_count < 20) {
        delay(500);
        Serial.print(".");
        retry_count++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println(" CONNECTED");
        configTime(timezone * 3600, dst, ntp_server1, ntp_server2, ntp_server3);
        digitalWrite(LED_BUILTIN, HIGH);
        delay(10000);
        digitalWrite(LED_BUILTIN, LOW);
    } else {
        Serial.println(" Connection Failed!");
        digitalWrite(LED_BUILTIN, HIGH);
        delay(3000);
        digitalWrite(LED_BUILTIN, LOW);
        delay(3000);
        digitalWrite(LED_BUILTIN, HIGH);
        delay(3000);
        digitalWrite(LED_BUILTIN, LOW);
    }
  client.setInsecure();  
}

void loop() {
    checkTime();
    telebot();
    detect();
    ultrasonic();
    delay(1000);  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
}

void checkTime() {
    time_t now = time(nullptr);
    if (now == 0) {
        Serial.println("Waiting for NTP...");
        return;
    }
    
    struct tm newtime;
    localtime_r(&now, &newtime);
    //‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡∏ä‡∏° ‡∏ô ‡∏ß‡∏¥
    currentHour = newtime.tm_hour;
    currentMin = newtime.tm_min;
    currentSec = newtime.tm_sec;

    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    Serial.printf("Current Time: %02d:%02d:%02d\n", currentHour, currentMin, currentSec);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 
    if (Auto == true){
      if ((currentHour > time_start_hour || 
    (currentHour == time_start_hour && currentMin >= time_start_minute)) && 
    (currentHour < time_end_hour || 
    (currentHour == time_end_hour && currentMin <= time_end_minute))) 
{
    Duty = true;
    if (Start_Notify) {
        bot.sendMessage(chat_id, "‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß :)", "");
        Start_Notify = false;
    }
} 
else if (currentHour == time_end_hour && currentMin > time_end_minute) {
    Start_Notify = true;
    Duty = false;
}
    }
    }
    

    //‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πâ‡∏ô‡πÜ
    /*if (Auto == true){
    if (currentHour == time_start_hour && currentMin == time_start_minute ){ //&& currentSec <= 59
      Duty = true;
      if(Start_Notify == true){
        bot.sendMessage(chat_id, "‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß :)", "");
        Start_Notify = false;
        }
        }
    else{
       Start_Notify = true;
       Duty = false;
    }
      if(currentHour < time_end_hour){
          Start_Notify = true;
          Duty = false;
      }
    }
    }*/

void detect(){
if(Duty == true){
HC501_val = digitalRead(HC501_digitalPin); //‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì digital ‡∏Ç‡∏≤33 ‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå

Serial.print("HC501_val = "); // HC501 ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå "val = "
Serial.println(HC501_val); // HC501 ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ val

//Ultra
Serial.print(cm);
Serial.print("cm");
Serial.println();

//HC501
if((cm < 70) || (doit == true)){  // ‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏à‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ if((cm < 70) || (doit == true)){  , if ((HC501_val == 1 && cm <= 70) || doit == true) { 
Serial.println("Jone500 Detected !!!");
if(Warning_Notify == true){
digitalWrite(LED_BUILTIN, HIGH);
bot.sendMessage(chat_id, "üî¥ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß! ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!", "");
Serial.println("Sended Message");
if (!hasBeeped) {  // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  beep(8, 100); // ‡∏î‡∏±‡∏á 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á, ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 300ms, ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 500ms
  hasBeeped = true;   // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ã‡πâ‡∏≥
}
Warning_Notify = false;
count_intrusions++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö

  // üî• ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô ThingSpeak
  sendDataToThingSpeak(count_intrusions, currentHour, currentMin, Duty);
}
doit = false;
}
else {
Serial.println("Cant'Dectect :(");
Warning_Notify = true;
hasBeeped = false;
digitalWrite(LED_BUILTIN, LOW);
}
}
}

void telebot(){
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Telegram
int New_Msg = bot.getUpdates(bot.last_message_received + 1);

while (New_Msg) {
Serial.println("New message to Telegram ");
for (int i = 0; i < New_Msg; i++) {
//String chat_id = bot.messages[i].chat_id;
String text = bot.messages[i].text;
Serial.println("Message: " + text);
// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
if (text == "/hello") {
bot.sendMessage(chat_id, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏π‡∏à‡∏á‡∏≠‡∏≤‡∏á‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢üêç", "");}
else if (text == "/chatid") {
bot.sendMessage(chat_id, "chat id =" + String(chat_id), "");}
else if (text == "/timeset") {
bot.sendMessage(chat_id, "üïê‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏Ñ‡∏∑‡∏≠ "  + String(time_start_hour) + ":" + String(time_start_minute) + " ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ " + String(time_end_hour) + ":" + String(time_end_minute),""); }
else if (text == "/status") {
bot.sendMessage(chat_id, "üîß‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô = " + String(Duty), "");}
else if (text == "/on") {
Auto = false;
Duty = true;
// üî• ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ Duty ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ThingSpeak
sendDutyToThingSpeak(1);
bot.sendMessage(chat_id, "üü¢‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô = " + String(Duty), "");}
else if (text == "/off") {
Auto = false;
Duty = false;
// üî• ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ Duty ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ThingSpeak
sendDutyToThingSpeak(0);
bot.sendMessage(chat_id, "üî¥‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô = " + String(Duty), "");}
else if (text == "/auto.on") {
Auto = true;
bot.sendMessage(chat_id, "üü¢‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ôAuto = " + String(Auto), "");}
else if (text == "/auto.off") {
Auto = false;
bot.sendMessage(chat_id, "üî¥‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ôAuto = " + String(Auto), "");}
else if (text == "/auto.check") {
bot.sendMessage(chat_id, "ü¶æ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ôAuto = " + String(Auto), "");}
else if (text == "/whatstime") {
bot.sendMessage(chat_id, "üïê‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ "  + String(currentHour) + ":" + String(currentMin) + " ‡∏ô." ,""); }
else if (text == "/doit") {
doit = true;}
else if (text == "/dontdoit") {
doit = false;}
else if (text == "/dostatus") {
bot.sendMessage(chat_id, "ü¶æ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ôDo = " + String(doit), "");}

else {
bot.sendMessage(chat_id, "ü§Ø‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à " + text, "");
}
}
New_Msg = bot.getUpdates(bot.last_message_received + 1);
}
}

void beep(int times, int duration) {
    for (int i = 0; i < times; i++) {
        digitalWrite(BUZZER_PIN, LOW);  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        delay(duration);
        digitalWrite(BUZZER_PIN, HIGH);   // ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        delay(duration);
    }
}


void sendDataToThingSpeak(int count, int hour, int minute, int status) {
    WiFiClient client;
    if (client.connect(server, 80)) { 
        String url = "/update?api_key=" + apiKey;
        url += "&field1=" + String(count);   // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å
        url += "&field2=" + String(hour);    // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        url += "&field3=" + String(minute);  // ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        url += "&field4=" + String(status);  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö

        client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                     "Host: " + server + "\r\n" +
                     "Connection: close\r\n\r\n");

        Serial.println("Data sent to ThingSpeak!");
        client.stop();
    } else {
        Serial.println("Connection to ThingSpeak failed.");
    }
}

void sendDutyToThingSpeak(int dutyStatus) {
    WiFiClient client;

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (client.connect(server, 80)) {
        String url = "/update?api_key=" + apiKey;
        url += "&field4=" + String(dutyStatus);
        
        // ‡∏™‡πà‡∏á HTTP Request
        client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                     "Host: " + server + "\r\n" +
                     "Connection: close\r\n\r\n");
        
        Serial.println("üîµ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ Duty ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ThingSpeak ‡πÅ‡∏•‡πâ‡∏ß!");
    } else {
        Serial.println("üî¥ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ThingSpeak ‡πÑ‡∏î‡πâ!");
    }
    client.stop();
}

void ultrasonic(){
pinMode(pingPin, OUTPUT);
digitalWrite(pingPin, LOW);
delayMicroseconds(2);
digitalWrite(pingPin, HIGH);
delayMicroseconds(5);
digitalWrite(pingPin, LOW);
pinMode(inPin, INPUT);
duration = pulseIn(inPin, HIGH);
cm = microsecondsToCentimeters(duration);
}

long microsecondsToCentimeters(long microseconds)
{
return microseconds / 29 / 2;
}